import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
import requests
import time
import csv
from bs4 import BeautifulSoup
from datetime import datetime
import webbrowser
import threading
import os

class WikiCheckApp:
    def __init__(self, root):
        self.root = root
        self.root.title("WikiCheck - –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–µ–Ω–æ–≤ –≤ Wikipedia")
        self.root.geometry("700x500")
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
        self.headers = {
            "User-Agent": "Mozilla/5.0 (compatible; DropDomainBot/1.0; +mailto:veprik8900@mail.ru)"
        }
        
        self.setup_ui()
        
    def setup_ui(self):
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(main_frame, text="WikiCheck - –ü–æ–∏—Å–∫ –æ–±—Ä–∞—Ç–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ —Å Wikipedia", 
                               font=("Arial", 14, "bold"))
        title_label.grid(row=0, column=0, columnspan=3, pady=(0, 10))
        
        # –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
        ttk.Label(main_frame, text="–§–∞–π–ª —Å –¥–æ–º–µ–Ω–∞–º–∏:").grid(row=1, column=0, sticky=tk.W, pady=5)
        self.file_path = tk.StringVar()
        ttk.Entry(main_frame, textvariable=self.file_path, width=50).grid(row=1, column=1, padx=5, pady=5)
        ttk.Button(main_frame, text="–í—ã–±—Ä–∞—Ç—å", command=self.select_file).grid(row=1, column=2, pady=5)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞
        self.start_button = ttk.Button(main_frame, text="–ù–∞—á–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É", command=self.start_check)
        self.start_button.grid(row=2, column=0, columnspan=3, pady=10)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        self.progress = ttk.Progressbar(main_frame, mode='determinate')
        self.progress.grid(row=3, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=5)
        
        # –°—Ç–∞—Ç—É—Å
        self.status_label = ttk.Label(main_frame, text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        self.status_label.grid(row=4, column=0, columnspan=3, pady=5)
        
        # –õ–æ–≥–∏
        ttk.Label(main_frame, text="–õ–æ–≥–∏:").grid(row=5, column=0, sticky=tk.W, pady=(10, 0))
        self.log_text = scrolledtext.ScrolledText(main_frame, width=80, height=15)
        self.log_text.grid(row=6, column=0, columnspan=3, pady=5, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ö–Ω–æ–ø–∫–∞ —Å–≤—è–∑–∏
        contact_button = ttk.Button(main_frame, text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–≤—Ç–æ—Ä–æ–º", 
                                   command=self.open_contact)
        contact_button.grid(row=7, column=0, columnspan=3, pady=10)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏—è
        main_frame.columnconfigure(1, weight=1)
        main_frame.rowconfigure(6, weight=1)
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        
    def select_file(self):
        file_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–æ–º–µ–Ω–∞–º–∏",
            filetypes=[("Text files", "*.txt"), ("All files", "*.*")]
        )
        if file_path:
            self.file_path.set(file_path)
            
    def open_contact(self):
        webbrowser.open("https://t.me/Userspoi")
        
    def log(self, message):
        self.log_text.insert(tk.END, f"[{datetime.now().strftime('%H:%M:%S')}] {message}\n")
        self.log_text.see(tk.END)
        self.root.update()
        
    def search_wikipedia_links(self, domain):
        """
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Bing –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫ —Å Wikipedia –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–æ–º–µ–Ω
        """
        try:
            query = f"site:en.wikipedia.org OR site:ru.wikipedia.org {domain}"
            url = f"https://www.bing.com/search?q={query}"
            response = requests.get(url, headers=self.headers, timeout=10)

            soup = BeautifulSoup(response.text, 'html.parser')
            results = []

            for li in soup.find_all("li", class_="b_algo"):
                link = li.find("a")
                if link and "wikipedia.org" in link['href']:
                    title = link.get_text(strip=True)
                    href = link['href']
                    results.append((href, title))
            return results
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –¥–ª—è {domain}: {e}")
            return []
    
    def start_check(self):
        if not self.file_path.get():
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–æ–º–µ–Ω–∞–º–∏")
            return
            
        if not os.path.exists(self.file_path.get()):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.start_button.config(state='disabled')
        thread = threading.Thread(target=self.check_domains)
        thread.daemon = True
        thread.start()
        
    def check_domains(self):
        try:
            # –ß–∏—Ç–∞–µ–º –¥–æ–º–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞
            with open(self.file_path.get(), 'r', encoding='utf-8') as f:
                domains = [line.strip() for line in f if line.strip()]
            
            if not domains:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–§–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ–º–µ–Ω–æ–≤")
                self.start_button.config(state='normal')
                return
            
            self.log(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(domains)} –¥–æ–º–µ–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
            self.progress.config(maximum=len(domains))
            self.progress.config(value=0)
            
            results = []
            
            for i, domain in enumerate(domains, 1):
                self.status_label.config(text=f"–ü—Ä–æ–≤–µ—Ä—è—é: {domain} ({i}/{len(domains)})")
                self.log(f"[{i}/{len(domains)}] –ü—Ä–æ–≤–µ—Ä—è—é: {domain}")
                
                links = self.search_wikipedia_links(domain)
                
                for url, anchor in links:
                    results.append([domain, datetime.now().strftime('%Y-%m-%d'), url, anchor])
                    self.log(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞: {url}")
                
                if not links:
                    self.log(f"  ‚ùå –°—Å—ã–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                self.progress.config(value=i)
                self.root.update()
                
                time.sleep(1.5)  # –Ω–µ —Å–ø–∞–º–∏–º
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if results:
                output_file = 'wikipedia_backlinks.csv'
                with open(output_file, 'w', newline='', encoding='utf-8') as f:
                    writer = csv.writer(f)
                    writer.writerow(['–î–æ–º–µ–Ω', '–î–∞—Ç–∞', 'Wiki-—Å—Å—ã–ª–∫–∞', '–¢–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏'])
                    writer.writerows(results)
                
                self.log(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ: {len(results)} –¥–æ–º–µ–Ω–æ–≤ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏")
                self.log(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_file}")
                self.status_label.config(text=f"–ì–æ—Ç–æ–≤–æ! –ù–∞–π–¥–µ–Ω–æ {len(results)} —Å—Å—ã–ª–æ–∫")
                messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", f"–ù–∞–π–¥–µ–Ω–æ {len(results)} —Å—Å—ã–ª–æ–∫ —Å Wikipedia.\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_file}")
            else:
                self.log("\n‚ùå –°—Å—ã–ª–æ–∫ —Å Wikipedia –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                self.status_label.config(text="–ì–æ—Ç–æ–≤–æ! –°—Å—ã–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", "–°—Å—ã–ª–æ–∫ —Å Wikipedia –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
        except Exception as e:
            self.log(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        finally:
            self.start_button.config(state='normal')
            self.progress.config(value=0)

def main():
    root = tk.Tk()
    app = WikiCheckApp(root)
    root.mainloop()

if __name__ == "__main__":
    main()