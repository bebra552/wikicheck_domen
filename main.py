import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
import requests
import time
import csv
from bs4 import BeautifulSoup
from datetime import datetime
import webbrowser
import threading
import os
import socket
import whois
import re
from urllib.parse import urlparse

class WikiCheckApp:
    def __init__(self, root):
        self.root = root
        self.root.title("WikiCheck - –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–µ–Ω–æ–≤ –≤ Wikipedia")
        self.root.geometry("700x500")
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
        self.headers = {
            "User-Agent": "Mozilla/5.0 (compatible; DropDomainBot/1.0; +mailto:veprik8900@mail.ru)"
        }
        
        self.setup_ui()
        
    def setup_ui(self):
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(main_frame, text="WikiCheck - –ü–æ–∏—Å–∫ –æ–±—Ä–∞—Ç–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ —Å Wikipedia", 
                               font=("Arial", 14, "bold"))
        title_label.grid(row=0, column=0, columnspan=3, pady=(0, 10))
        
        # –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
        ttk.Label(main_frame, text="–§–∞–π–ª —Å –¥–æ–º–µ–Ω–∞–º–∏:").grid(row=1, column=0, sticky=tk.W, pady=5)
        self.file_path = tk.StringVar()
        ttk.Entry(main_frame, textvariable=self.file_path, width=50).grid(row=1, column=1, padx=5, pady=5)
        ttk.Button(main_frame, text="–í—ã–±—Ä–∞—Ç—å", command=self.select_file).grid(row=1, column=2, pady=5)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞
        self.start_button = ttk.Button(main_frame, text="–ù–∞—á–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É", command=self.start_check)
        self.start_button.grid(row=2, column=0, columnspan=3, pady=10)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        self.progress = ttk.Progressbar(main_frame, mode='determinate')
        self.progress.grid(row=3, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=5)
        
        # –°—Ç–∞—Ç—É—Å
        self.status_label = ttk.Label(main_frame, text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        self.status_label.grid(row=4, column=0, columnspan=3, pady=5)
        
        # –õ–æ–≥–∏
        ttk.Label(main_frame, text="–õ–æ–≥–∏:").grid(row=5, column=0, sticky=tk.W, pady=(10, 0))
        self.log_text = scrolledtext.ScrolledText(main_frame, width=80, height=15)
        self.log_text.grid(row=6, column=0, columnspan=3, pady=5, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ö–Ω–æ–ø–∫–∞ —Å–≤—è–∑–∏
        contact_button = ttk.Button(main_frame, text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–≤—Ç–æ—Ä–æ–º", 
                                   command=self.open_contact)
        contact_button.grid(row=7, column=0, columnspan=3, pady=10)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏—è
        main_frame.columnconfigure(1, weight=1)
        main_frame.rowconfigure(6, weight=1)
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        
    def select_file(self):
        file_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–æ–º–µ–Ω–∞–º–∏",
            filetypes=[("Text files", "*.txt"), ("All files", "*.*")]
        )
        if file_path:
            self.file_path.set(file_path)
            
    def open_contact(self):
        webbrowser.open("https://t.me/Userspoi")
        
    def log(self, message):
        self.log_text.insert(tk.END, f"[{datetime.now().strftime('%H:%M:%S')}] {message}\n")
        self.log_text.see(tk.END)
        self.root.update()
        
    def validate_domain(self, domain):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–æ–º–µ–Ω–∞
        """
        domain_regex = re.compile(
            r"^[a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.([a-zA-Z]{2,}\.?)+$"
        )
        return domain_regex.match(domain) is not None
    
    def check_domain_exists(self, domain):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–æ–º–µ–Ω–∞ —á–µ—Ä–µ–∑ DNS
        """
        try:
            socket.gethostbyname(domain)
            return True
        except socket.gaierror:
            return False
    
    def check_website_status(self, domain):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞
        """
        try:
            response = requests.get(f"http://{domain}", timeout=5, allow_redirects=True)
            return response.status_code
        except:
            try:
                response = requests.get(f"https://{domain}", timeout=5, allow_redirects=True)
                return response.status_code
            except:
                return None
    
    def get_whois_info(self, domain):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ WHOIS –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        """
        try:
            w = whois.whois(domain)
            info = {
                'domain_name': getattr(w, 'domain_name', 'N/A'),
                'creation_date': getattr(w, 'creation_date', 'N/A'),
                'expiration_date': getattr(w, 'expiration_date', 'N/A'),
                'updated_date': getattr(w, 'updated_date', 'N/A'),
                'registrar': getattr(w, 'registrar', 'N/A'),
                'registrant_name': getattr(w, 'name', 'N/A'),
                'registrant_org': getattr(w, 'org', 'N/A'),
                'registrant_country': getattr(w, 'country', 'N/A'),
                'registrant_email': getattr(w, 'email', 'N/A'),
                'status': getattr(w, 'status', 'N/A')
            }
            return info
        except Exception as e:
            self.log(f"    ‚ùå –û—à–∏–±–∫–∞ WHOIS –¥–ª—è {domain}: {e}")
            return None
    
    def calculate_domain_age(self, creation_date):
        """
        –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –¥–æ–º–µ–Ω–∞
        """
        try:
            if isinstance(creation_date, list):
                creation_date = creation_date[0]
            if isinstance(creation_date, datetime):
                age = datetime.now() - creation_date
                return age.days
            return None
        except:
            return None
    
    def analyze_domain_flags(self, domain_info, domain_age, website_status):
        """
        –ê–Ω–∞–ª–∏–∑ –∫—Ä–∞—Å–Ω—ã—Ö —Ñ–ª–∞–≥–æ–≤ –¥–æ–º–µ–Ω–∞
        """
        flags = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
        if domain_age is not None:
            if domain_age < 180:  # –º–ª–∞–¥—à–µ 6 –º–µ—Å—è—Ü–µ–≤
                flags.append("–ú–æ–ª–æ–¥–æ–π –¥–æ–º–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        if website_status is None:
            flags.append("–°–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        elif website_status >= 400:
            flags.append(f"HTTP –æ—à–∏–±–∫–∞ {website_status}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ WHOIS –¥–∞–Ω–Ω—ã—Ö
        if domain_info:
            if domain_info.get('registrant_name') == 'N/A':
                flags.append("–°–∫—Ä—ã—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            registrar = domain_info.get('registrar', '')
            if isinstance(registrar, str) and any(word in registrar.lower() for word in ['namecheap', 'godaddy']):
                # –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã, –Ω–µ —Ñ–ª–∞–≥
                pass
        
        return flags
    
    def search_wikipedia_links(self, domain):
        """
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Bing –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫ —Å Wikipedia –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–æ–º–µ–Ω
        """
        try:
            query = f"site:en.wikipedia.org OR site:ru.wikipedia.org {domain}"
            url = f"https://www.bing.com/search?q={query}"
            response = requests.get(url, headers=self.headers, timeout=10)

            soup = BeautifulSoup(response.text, 'html.parser')
            results = []

            for li in soup.find_all("li", class_="b_algo"):
                link = li.find("a")
                if link and "wikipedia.org" in link['href']:
                    title = link.get_text(strip=True)
                    href = link['href']
                    results.append((href, title))
            return results
        except Exception as e:
            self.log(f"    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –¥–ª—è {domain}: {e}")
            return []
    
    def process_domain(self, domain):
        """
        –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–º–µ–Ω–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
        """
        results = []
        
        # 1. –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–º–µ–Ω–∞
        if not self.validate_domain(domain):
            self.log(f"    ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–æ–º–µ–Ω–∞: {domain}")
            return results
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
        if not self.check_domain_exists(domain):
            self.log(f"    ‚ùå –î–æ–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ DNS: {domain}")
            return results
        
        self.log(f"    ‚úÖ –î–æ–º–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ DNS")
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞
        website_status = self.check_website_status(domain)
        if website_status:
            self.log(f"    ‚úÖ –°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω (HTTP {website_status})")
        else:
            self.log(f"    ‚ùå –°–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # 4. –ü–æ–ª—É—á–µ–Ω–∏–µ WHOIS –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        self.log(f"    üîç –ü–æ–ª—É—á–µ–Ω–∏–µ WHOIS –¥–∞–Ω–Ω—ã—Ö...")
        domain_info = self.get_whois_info(domain)
        
        if domain_info:
            # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –¥–æ–º–µ–Ω–∞
            domain_age = self.calculate_domain_age(domain_info.get('creation_date'))
            if domain_age:
                self.log(f"    üìÖ –í–æ–∑—Ä–∞—Å—Ç –¥–æ–º–µ–Ω–∞: {domain_age} –¥–Ω–µ–π ({domain_age//365} –ª–µ—Ç)")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ
            if domain_info.get('registrant_name') != 'N/A':
                self.log(f"    üë§ –í–ª–∞–¥–µ–ª–µ—Ü: {domain_info.get('registrant_name')}")
            if domain_info.get('registrant_country') != 'N/A':
                self.log(f"    üåç –°—Ç—Ä–∞–Ω–∞: {domain_info.get('registrant_country')}")
            if domain_info.get('registrar') != 'N/A':
                self.log(f"    üè¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {domain_info.get('registrar')}")
            
            # –ê–Ω–∞–ª–∏–∑ –∫—Ä–∞—Å–Ω—ã—Ö —Ñ–ª–∞–≥–æ–≤
            flags = self.analyze_domain_flags(domain_info, domain_age, website_status)
            if flags:
                self.log(f"    üö© –ö—Ä–∞—Å–Ω—ã–µ —Ñ–ª–∞–≥–∏: {', '.join(flags)}")
        
        # 5. –ü–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫ –≤ Wikipedia
        self.log(f"    üîç –ü–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫ –≤ Wikipedia...")
        links = self.search_wikipedia_links(domain)
        
        for url, anchor in links:
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è CSV
            row = [
                domain,
                datetime.now().strftime('%Y-%m-%d'),
                url,
                anchor,
                domain_age if domain_age else 'N/A',
                domain_info.get('registrant_country', 'N/A') if domain_info else 'N/A',
                domain_info.get('registrar', 'N/A') if domain_info else 'N/A',
                website_status if website_status else 'N/A',
                '; '.join(flags) if flags else '–ù–µ—Ç'
            ]
            results.append(row)
            self.log(f"    ‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞: {url}")
        
        return results
    
    def start_check(self):
        if not self.file_path.get():
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–æ–º–µ–Ω–∞–º–∏")
            return
            
        if not os.path.exists(self.file_path.get()):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.start_button.config(state='disabled')
        thread = threading.Thread(target=self.check_domains)
        thread.daemon = True
        thread.start()
        
    def check_domains(self):
        try:
            # –ß–∏—Ç–∞–µ–º –¥–æ–º–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞
            with open(self.file_path.get(), 'r', encoding='utf-8') as f:
                domains = [line.strip() for line in f if line.strip()]
            
            if not domains:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–§–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ–º–µ–Ω–æ–≤")
                self.start_button.config(state='normal')
                return
            
            self.log(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(domains)} –¥–æ–º–µ–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
            self.progress.config(maximum=len(domains))
            self.progress.config(value=0)
            
            results = []
            
            for i, domain in enumerate(domains, 1):
                self.status_label.config(text=f"–ü—Ä–æ–≤–µ—Ä—è—é: {domain} ({i}/{len(domains)})")
                self.log(f"[{i}/{len(domains)}] –ü—Ä–æ–≤–µ—Ä—è—é: {domain}")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                domain_results = self.process_domain(domain)
                results.extend(domain_results)
                
                if not domain_results:
                    self.log(f"    ‚ùå –°—Å—ã–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                self.progress.config(value=i)
                self.root.update()
                
                time.sleep(2)  # —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–∞—É–∑—É –∏–∑-–∑–∞ WHOIS –∑–∞–ø—Ä–æ—Å–æ–≤
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            if results:
                output_file = 'wikipedia_backlinks_extended.csv'
                with open(output_file, 'w', newline='', encoding='utf-8') as f:
                    writer = csv.writer(f)
                    writer.writerow([
                        '–î–æ–º–µ–Ω', 
                        '–î–∞—Ç–∞', 
                        'Wiki-—Å—Å—ã–ª–∫–∞', 
                        '–¢–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏',
                        '–í–æ–∑—Ä–∞—Å—Ç –¥–æ–º–µ–Ω–∞ (–¥–Ω–∏)',
                        '–°—Ç—Ä–∞–Ω–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞',
                        '–†–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                        'HTTP —Å—Ç–∞—Ç—É—Å',
                        '–ö—Ä–∞—Å–Ω—ã–µ —Ñ–ª–∞–≥–∏'
                    ])
                    writer.writerows(results)
                
                self.log(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ: {len(results)} –¥–æ–º–µ–Ω–æ–≤ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏")
                self.log(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_file}")
                self.status_label.config(text=f"–ì–æ—Ç–æ–≤–æ! –ù–∞–π–¥–µ–Ω–æ {len(results)} —Å—Å—ã–ª–æ–∫")
                messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", f"–ù–∞–π–¥–µ–Ω–æ {len(results)} —Å—Å—ã–ª–æ–∫ —Å Wikipedia.\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_file}")
            else:
                self.log("\n‚ùå –°—Å—ã–ª–æ–∫ —Å Wikipedia –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                self.status_label.config(text="–ì–æ—Ç–æ–≤–æ! –°—Å—ã–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", "–°—Å—ã–ª–æ–∫ —Å Wikipedia –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
        except Exception as e:
            self.log(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        finally:
            self.start_button.config(state='normal')
            self.progress.config(value=0)

def main():
    root = tk.Tk()
    app = WikiCheckApp(root)
    root.mainloop()

if __name__ == "__main__":
    main()
